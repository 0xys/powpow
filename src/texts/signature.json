{
    "1": "電子署名は、電子書類やデータを処理するコンピュータにとっての判子を押すアルゴリズムと見て良い。電子的に判子を押される何かしらの書類・データがあり、それに権限を持つ誰かが署名する。判子を押される書類・データを「メッセージ」と読んだりする。また、判子なので偽造されないような仕組みが必要である。つまり本人以外が押した判子は偽造と判定できるようにしなければならない。しかし、そもそもコンピュータの世界で、”本人”はどう定義されるのだろうか。",
    "2": "そこで登場するのが秘密鍵という概念である。秘密鍵とは名前の通り、所有者が自分以外に明かしてはならない\"値\"である。ここで値と言ったのは、秘密鍵と呼ばれるそれは、コンピューターの世界では鍵の形をしている訳ではなく、数字として表現されているためだ。鍵と呼ばれているのは、あくまでコンピュータ内でのその振る舞い方と役割がリアル世界の鍵と同等と考えられるから便宜上そう呼ばれているのだ。",
    "3": "秘密鍵は、ウェブサイトのログインの際の本人確認に使われるパスワードに似ている。認証認可のための本人確認書類や印鑑を保管している金庫の暗証番号とも例えることができるかもしれない。しかし、本人であることを主張する前に、そもそも自分が誰なのか名乗らないといけない。ログイン画面でアカウント名を入力するように、電子署名では、署名者の名前もしくはアカウントIDに相当するものを公開鍵と呼んでいる。公開鍵はその名の通り、全世界に公開しても問題ない値である。",
    "4": "ここで秘密鍵と公開鍵の関係性についても話しておかないといけない。秘密鍵と公開鍵は数学的に一対一の関係を持ってペアになっている数字である。ただこういう表現だと何じゃそりゃとなってしまうので、ここでは簡単に捨象した例えを使って補足説明させていただく。数学の世界では、ある数字が、別の数字と、ある関係性においてペアになるケースが多くある。例えば、ある正の数はその負の数とペアになっている。例えば-5と+5。この場合における関係性は「絶対値が等しい二つの数」ということになる。また、11と33には後者が前者の3倍という関係においてペアになっている。こう関係性が定義されれば、例えば1と3、9と27もペアになる。似たように、秘密鍵と公開鍵も、電子署名に都合のいいように定義されたある関係性を持った二つの数字とイメージしていただきたい。",
    "5": "しかし、「電子署名に都合のいいように定義されたある関係性」とは何なのだろうか。気になるかもしれないが、ここではその性質だけ知っておけば良い。その性質とは、「公開鍵を知っていても秘密鍵は知ることができない」という性質である。言い換えると、公開鍵から秘密鍵は計算できないということだ。これは電子署名に都合がいい。というのも、公開鍵は署名者のIDなので全世界に知られてしまうのに対して、秘密鍵は署名者本人だけが知る秘密の数にしておきたいからだ。社長の名前は公開されていても、社長の印鑑の保管場所や暗証番号は分からないのと同じである。",
    "6": "コンピュータの世界での本人の表現方法に触れながら、秘密鍵と公開鍵の話が済んだので、やっと電子署名アルゴリズムについて話すことができる。",
    "7": "ことあるごとに判子を押すことに例えてきたが、判子の場合と電子署名の場合で何が何に相当しているのかを図にあらわすと以下のようになる。",
    "8": "印章が本物かを確かめる方法なければならない。印鑑証明を役所に提出して、書類に押された印章",
    "keygen": "実際に秘密鍵と公開鍵のペアを生成する装置を用意した。\"Generate Key Pair\"というボタンを押せば秘密鍵と公開鍵のペアがランダムに生成される。御覧のとおり長い16進数の文字列で鍵は表現されている。右のコピーアイコンをクリックすればコピーできるので、続く署名・検証アルゴリズムを試すときに使ってほしい。",
    "sig": "まとめると、\"署名アルゴリズム\"とは、認可したい事柄が書かれた「メッセージ」を「秘密鍵」所有者が「公開鍵」の名で署名し、印章に相当する「署名」を出力するアルゴリズムである。",
    "ver": "検証アルゴリズムは、「メッセージ」に「公開鍵」の名で署名したとする「署名」が、本当にその公開鍵とペアになっている「秘密鍵」所有者によって出力されたかどうかをYES/NOで判定するアルゴリズムである。"
}